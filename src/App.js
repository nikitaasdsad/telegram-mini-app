import React, { useState, useEffect } from 'react';

const heroes = [
  'Abaddon', 'Alchemist', 'Ancient Apparition', 'Anti-Mage', 'Arc Warden', 'Axe',
  'Bane', 'Batrider', 'Beastmaster', 'Bloodseeker', 'Bounty Hunter', 'Brewmaster', 'Bristleback', 'Broodmother',
  'Centaur Warrunner', 'Chaos Knight', 'Chen', 'Clinkz', 'Clockwerk', 'Crystal Maiden',
  'Dark Seer', 'Dark Willow', 'Dawnbreaker', 'Dazzle', 'Death Prophet', 'Disruptor', 'Doom', 'Dragon Knight', 'Drow Ranger',
  'Earth Spirit', 'Earthshaker', 'Elder Titan', 'Ember Spirit', 'Enchantress', 'Enigma',
  'Faceless Void', 'Grimstroke', 'Gyrocopter', 'Hoodwink', 'Huskar',
  'Invoker', 'Io', 'Jakiro', 'Juggernaut', 'Keeper of the Light', 'Kunkka',
  'Legion Commander', 'Leshrac', 'Lich', 'Lifestealer', 'Lina', 'Lion', 'Lone Druid', 'Luna', 'Lycan',
  'Magnus', 'Marci', 'Mars', 'Medusa', 'Meepo', 'Mirana', 'Monkey King', 'Morphling',
  'Muerta', 'Naga Siren', 'Nature\'s Prophet', 'Necrophos', 'Night Stalker', 'Nyx Assassin',
  'Ogre Magi', 'Omniknight', 'Oracle', 'Outworld Destroyer',
  'Pangolier', 'Phantom Assassin', 'Phantom Lancer', 'Phoenix', 'Primal Beast', 'Puck', 'Pudge', 'Pugna', 'Queen of Pain',
  'Razor', 'Riki', 'Rubick',
  'Sand King', 'Shadow Demon', 'Shadow Fiend', 'Shadow Shaman', 'Silencer', 'Skywrath Mage', 'Slardar', 'Slark', 'Snapfire', 'Sniper', 'Spectre', 'Spirit Breaker', 'Storm Spirit', 'Sven',
  'Techies', 'Templar Assassin', 'Terrorblade', 'Tidehunter', 'Timbersaw', 'Tinker', 'Tiny', 'Treant Protector', 'Troll Warlord', 'Tusk',
  'Underlord', 'Undying', 'Ursa',
  'Vengeful Spirit', 'Venomancer', 'Viper', 'Visage', 'Void Spirit',
  'Warlock', 'Weaver', 'Windranger', 'Winter Wyvern', 'Witch Doctor', 'Wraith King',
  'Zeus'
];

function App() {
  const [heroSearch, setHeroSearch] = useState('');
  const [filteredHeroes, setFilteredHeroes] = useState(heroes);
  const [selectedHero, setSelectedHero] = useState('');
  const [skin, setSkin] = useState('');
  const [pose, setPose] = useState('');
  const [comment, setComment] = useState('');
  const [contact, setContact] = useState('');
  const [submitted, setSubmitted] = useState(false);

  useEffect(() => {
    setFilteredHeroes(
      heroes.filter(hero =>
        hero.toLowerCase().includes(heroSearch.toLowerCase())
      )
    );
  }, [heroSearch]);

  const handleSubmit = async () => {
    if (!selectedHero || !skin || !pose || !contact) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
      return;
    }

    const order = {
      hero: selectedHero,
      skin,
      pose,
      comment,
      contact
    };

    try {
      const response = await fetch('/api/order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(order)
      });

      if (response.ok) {
        setSubmitted(true);
      } else {
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    }
  };

  if (submitted) {
    return (
      <div style={{ padding: 20, textAlign: 'center' }}>
        <h2>üéâ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</h2>
      </div>
    );
  }

  return (
    <div style={{ maxWidth: 500, margin: 'auto', padding: 20, fontFamily: 'Arial' }}>
      <h2>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>

      <label>–ü–æ–∏—Å–∫ –≥–µ—Ä–æ—è</label>
      <input
        type="text"
        value={heroSearch}
        onChange={e => setHeroSearch(e.target.value)}
        placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–µ—Ä–æ—è"
        style={{ width: '100%', padding: 8, marginBottom: 10 }}
      />

      <label>–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è</label>
      <select
        value={selectedHero}
        onChange={e => setSelectedHero(e.target.value)}
        style={{ width: '100%', padding: 8, marginBottom: 10 }}
      >
        <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è --</option>
        {filteredHeroes.map(hero => (
          <option key={hero} value={hero}>{hero}</option>
        ))}
      </select>

      <input
        type="text"
        value={skin}
        onChange={e => setSkin(e.target.value)}
        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∏–Ω–∞"
        style={{ width: '100%', padding: 8, marginBottom: 10 }}
      />

      <input
        type="text"
        value={pose}
        onChange={e => setPose(e.target.value)}
        placeholder="–ü–æ–∑–∞ –≥–µ—Ä–æ—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞—Ç–∞–∫—É—é—â–∞—è, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–∞—è)"
        style={{ width: '100%', padding: 8, marginBottom: 10 }}
      />

      <textarea
        value={comment}
        onChange={e => setComment(e.target.value)}
        placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        style={{ width: '100%', padding: 8, marginBottom: 10 }}
      />

      <input
        type="text"
        value={contact}
        onChange={e => setContact(e.target.value)}
        placeholder="@your_tg"
        style={{ width: '100%', padding: 8, marginBottom: 20 }}
      />

      <button
        onClick={handleSubmit}
        style={{
          width: '100%',
          padding: 10,
          backgroundColor: '#4CAF50',
          color: 'white',
          border: 'none',
          cursor: 'pointer',
          fontSize: 16
        }}
      >
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
      </button>
    </div>
  );
}

export default App;
