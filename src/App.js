import { useEffect, useState } from 'react';

const allHeroes = ['Invoker', 'Pudge', 'Phantom Assassin', 'Juggernaut', 'Anti-Mage', 'Tinker', 'Lina', 'Crystal Maiden'];  // –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤

export default function App() {
  const [tg, setTg] = useState(null);
  const [hero, setHero] = useState('');
  const [skin, setSkin] = useState('');
  const [pose, setPose] = useState('');
  const [comment, setComment] = useState('');
  const [contact, setContact] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredHeroes, setFilteredHeroes] = useState(allHeroes);

  useEffect(() => {
    const tgWindow = window?.Telegram?.WebApp;
    if (tgWindow) {
      tgWindow.ready();
      setTg(tgWindow);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥–µ—Ä–æ–µ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞
  useEffect(() => {
    setFilteredHeroes(
      allHeroes.filter((hero) => hero.toLowerCase().includes(searchQuery.toLowerCase()))
    );
  }, [searchQuery]);

  const sendOrder = async () => {
  const order = { hero, skin, pose, comment, contact };

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const response = await fetch('https://your-server-url.com/api/order', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(order),
  });

  if (response.ok) {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, –º–æ–∂–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    alert('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
  } else {
    alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.');
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram WebApp
  if (tg) tg.sendData(JSON.stringify(order));
};


  return (
    <div className="p-4 space-y-4 max-w-md mx-auto">
      <h1 className="text-2xl font-bold text-center">Pick Your Hero</h1>
      <p className="text-center text-sm text-gray-500">–°–¥–µ–ª–∞–π –∫–∞—Å—Ç–æ–º–Ω—É—é —Ñ–∏–≥—É—Ä–∫—É –≥–µ—Ä–æ—è Dota 2</p>

      <div>
        <label className="font-semibold">1. –í—ã–±–µ—Ä–∏ –≥–µ—Ä–æ—è:</label>
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫ –≥–µ—Ä–æ—è..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="w-full p-2 border mt-2"
        />
        <div className="mt-2 max-h-60 overflow-auto">
          {filteredHeroes.length > 0 ? (
            filteredHeroes.map((h) => (
              <div
                key={h}
                onClick={() => setHero(h)}
                className={`p-2 cursor-pointer ${hero === h ? 'bg-blue-500 text-white' : 'bg-white'}`}
              >
                {h}
              </div>
            ))
          ) : (
            <p className="text-gray-500">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...</p>
          )}
        </div>
      </div>

      <div>
        <label className="font-semibold">2. –°–∫–∏–Ω –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥:</label>
        <input
          className="w-full p-2 border mt-2"
          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ"
          value={skin}
          onChange={(e) => setSkin(e.target.value)}
        />
      </div>

      <div>
        <label className="font-semibold">3. –ü–æ–∑–∞ –≥–µ—Ä–æ—è:</label>
        <input
          className="w-full p-2 border mt-2"
          placeholder="–ü—Ä–∏–º–µ—Ä: –∞—Ç–∞–∫—É–µ—Ç, —Å—Ç–æ–∏—Ç, —Å–∏–¥–∏—Ç"
          value={pose}
          onChange={(e) => setPose(e.target.value)}
        />
      </div>

      <div>
        <label className="font-semibold">4. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</label>
        <textarea
          className="w-full p-2 border mt-2"
          placeholder="–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
          value={comment}
          onChange={(e) => setComment(e.target.value)}
        />
      </div>

      <div>
        <label className="font-semibold">5. –ö–æ–Ω—Ç–∞–∫—Ç:</label>
        <input
          className="w-full p-2 border mt-2"
          placeholder="@–Ω–∏–∫ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
          value={contact}
          onChange={(e) => setContact(e.target.value)}
        />
      </div>

      <button
        className="w-full p-2 bg-blue-500 text-white mt-4"
        onClick={sendOrder}
        disabled={!hero || !contact}
      >
        üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
      </button>
    </div>
  );
}
